name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        run_install: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        cache-dependency-path: |
          pnpm-lock.yaml
          server/pnpm-lock.yaml

    - name: Install frontend dependencies
      run: pnpm install --frozen-lockfile

    - name: Install server dependencies
      run: cd server && pnpm install --frozen-lockfile

    - name: Build frontend
      run: pnpm run build

    - name: Build server
      run: cd server && pnpm run build

    - name: Install Playwright browsers
      run: cd server && pnpm exec playwright install chromium --with-deps

    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('server/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Start server for testing
      run: |
        cd server && pnpm run dev &
        sleep 10
      env:
        NODE_ENV: test
        HEADFUL: 0

    - name: Run Playwright tests
      run: cd server && pnpm run test
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: server/test-results/
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        run_install: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        cache-dependency-path: |
          pnpm-lock.yaml
          server/pnpm-lock.yaml

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install server dependencies
      run: cd server && pnpm install --frozen-lockfile

    - name: Run lint
      run: pnpm run lint

  docker:
    runs-on: ubuntu-latest
    needs: [lint]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        run_install: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        cache-dependency-path: |
          pnpm-lock.yaml
          server/pnpm-lock.yaml

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install server dependencies
      run: cd server && pnpm install --frozen-lockfile

    - name: Run security audit
      run: |
        pnpm audit --audit-level high
        cd server && pnpm audit --audit-level high

    - name: Check for vulnerabilities
      run: |
        npx @cyclonedx/cyclonedx-npm --output-format json --output-file sbom.json
        echo "SBOM generated successfully"
      continue-on-error: true 